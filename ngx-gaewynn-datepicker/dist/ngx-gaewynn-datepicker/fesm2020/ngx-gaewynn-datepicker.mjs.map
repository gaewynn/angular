{"version":3,"file":"ngx-gaewynn-datepicker.mjs","sources":["../../../projects/ngx-gaewynn-datepicker/src/lib/ngx-gaewynn-datepicker.service.ts","../../../projects/ngx-gaewynn-datepicker/src/lib/date-picker/ngx-gaewynn-datepicker.component.ts","../../../projects/ngx-gaewynn-datepicker/src/lib/date-picker/ngx-gaewynn-datepicker.component.html","../../../projects/ngx-gaewynn-datepicker/src/lib/date-picker/ngx-gaewynn-datepicker.module.ts","../../../projects/ngx-gaewynn-datepicker/src/lib/date-range-picker/ngx-gaewynn-date-range-picker.component.ts","../../../projects/ngx-gaewynn-datepicker/src/lib/date-range-picker/ngx-gaewynn-date-range-picker.component.html","../../../projects/ngx-gaewynn-datepicker/src/lib/date-range-picker/ngx-gaewynn-date-range-picker.module.ts","../../../projects/ngx-gaewynn-datepicker/src/public-api.ts","../../../projects/ngx-gaewynn-datepicker/src/ngx-gaewynn-datepicker.ts"],"sourcesContent":["import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { Subject } from 'rxjs/internal/Subject';\n\n/**\n * InjectionToken for gaewynn-datepicker that can be used to configure the format used by each datepicker.\n * @see {@link INgxGaewynnDatePickerConfiguration}\n */\nexport const NGX_GAEWYNN_DATEPICKER_CONFIGURATION = new InjectionToken<INgxGaewynnDatePickerConfiguration>(\n  'NGX_GAEWYNN_DATEPICKER_CONFIGURATION',\n  undefined\n);\n\n/**\n * Description of a format that will be applied to a datepicker\n */\nexport interface INgxGaewynnDatePickerFormats {\n  /**\n   * A unique name of a format. This name will be used to identfy a format\n   */\n  format: string;\n  /**\n   * The locale to use in the current format definition.\n   * Used when opening the calendar popup to display the labels in the given locale\n   */\n  locale: string;\n  /**\n   * The date formats to apply on the datepicker\n   */\n  momentDateFormats: { \n      parse: { dateInput: string }, \n      display: { \n          dateInput: string;\n          monthYearLabel: string;\n          dateA11yLabel: string;\n          monthYearA11yLabel: string;\n      }\n  };\n}\n\n/**\n * Description of the whole configuration used by the gaewynn-datepicker component\n */\nexport interface INgxGaewynnDatePickerConfiguration {\n  /**\n   * The initials formats to apply to the datepickers when they render the first time\n   */\n  initials: { \n    /**\n     * A unique identifier (@see {@link INgxGaewynnDatePickerFormats}) of a format to apply\n     * @remarks each format defined here should have a corresponding structure defined in the \"formats\" property\n     */\n    format: string, \n    /**\n     * The name of the group of datepickers on which apply the format\n     */\n    group: string \n  }[];\n  /**\n   * The list of formats provided by the application\n   */\n  formats: INgxGaewynnDatePickerFormats[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxGaewynnDatePickerService {\n\n  /**\n   * Dispatches the new configuration when a format update is requested using @see {@link updateFormat}\n   * @internal\n   */\n  public configuration$: Subject<INgxGaewynnDatePickerConfiguration> = new Subject<INgxGaewynnDatePickerConfiguration>();\n\n  private _datePickerConfiguration!: INgxGaewynnDatePickerConfiguration;\n\n  /**\n   * @internal\n   */\n  constructor(@Inject(NGX_GAEWYNN_DATEPICKER_CONFIGURATION) private _configuration: INgxGaewynnDatePickerConfiguration) {\n    this._datePickerConfiguration = JSON.parse(JSON.stringify(_configuration));\n  }\n\n  /**\n   * Initializes all datepickers with the configuration provided in {@link NGX_GAEWYNN_DATEPICKER_CONFIGURATION}\n   * @remarks this function should be called in each component using <ngx-gaewynn-datepicker> or <mgx-gaewynn-date-range-picker> during ngOnInit\n   * @public\n   */\n  public init(): void {\n    this.configuration$.next(this._datePickerConfiguration);\n  }\n\n  /**\n   * Updates the given group of datepickers to the specified format (@see {@link INgxGaewynnDatePickerConfiguration})\n   * \n   * @param format Date formats to appliy\n   * @param group The name of a group of datepickers on which apply the specified format\n   * @public\n   */\n  public updateFormat(format: string, group: string): void {\n\n    for (let index = 0; index < this._datePickerConfiguration.initials.length; index++) {\n      \n      const element = this._datePickerConfiguration.initials[index];\n      if (element.group === group)\n        element.format = format;\n    }\n\n    this.init();\n  }\n}\n","import { Component, Inject, ContentChild, Input, NgZone, OnDestroy, EnvironmentInjector, AfterViewInit } from '@angular/core';\nimport { FormControlDirective } from '@angular/forms';\n\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatDatepicker } from '@angular/material/datepicker';\nimport { Subscription, take } from 'rxjs';\n\nimport { INgxGaewynnDatePickerConfiguration, NgxGaewynnDatePickerService, INgxGaewynnDatePickerFormats } from '../ngx-gaewynn-datepicker.service';\n\n@Component({\n  selector: 'ngx-gaewynn-datepicker',\n  templateUrl: './ngx-gaewynn-datepicker.component.html'\n})\nexport class NgxGaewynnDatePickerComponent implements AfterViewInit, OnDestroy {\n  \n  @ContentChild(MatDatepicker) \n  public datePicker!: MatDatepicker<Date>;\n\n  @ContentChild(FormControlDirective)\n  public formControl!: FormControlDirective;\n\n  @Input()\n  public group!: string;\n\n  private _calendarSubscription!: Subscription;\n  private _configurationSubscription!: Subscription;\n  private _zoneSubscription!: Subscription;\n  private _configuration!: INgxGaewynnDatePickerConfiguration;\n  private _formats!: INgxGaewynnDatePickerFormats;\n\n  constructor(\n    private readonly _envInjector: EnvironmentInjector,\n    private readonly _zone: NgZone,\n    @Inject(MAT_DATE_LOCALE) private _locale: string,\n    private readonly _dateAdapter: DateAdapter<any>,\n    private readonly _ngxGaewynnDatePickerService: NgxGaewynnDatePickerService) { \n\n    this._configurationSubscription = this._ngxGaewynnDatePickerService.configuration$.subscribe((configuration: INgxGaewynnDatePickerConfiguration) => {\n\n      this._configuration = configuration;\n\n      //  During initialization, the MatDatePicker does not exist yet\n      if (!this.datePicker)\n        return;\n      \n      this._apply();\n    })\n  }\n  \n  public ngAfterViewInit(): void {\n    \n    this._apply();\n\n    //  Handle calendar formats when it opened (allows to preserve independance between date pickers)\n    this._calendarSubscription = this.datePicker.openedStream.subscribe(() => {\n\n      this._locale = this._formats.locale;\n      this._dateAdapter.setLocale(this._formats.locale);\n\n      var records = (this._envInjector as any).records as Map<any, any>;\n      records.get(MAT_DATE_FORMATS).value.display.dateInput = this._formats.momentDateFormats.display.dateInput;\n      records.get(MAT_DATE_FORMATS).value.display.dateA11yLabel = this._formats.momentDateFormats.display.dateA11yLabel;\n      records.get(MAT_DATE_FORMATS).value.display.monthYearLabel = this._formats.momentDateFormats.display.monthYearLabel;\n      records.get(MAT_DATE_FORMATS).value.display.monthYearA11yLabel = this._formats.momentDateFormats.display.monthYearA11yLabel;\n      records.get(MAT_DATE_FORMATS).value.parse.dateInput = this._formats.momentDateFormats.parse.dateInput;\n    });\n  }\n\n  public ngOnDestroy(): void {\n\n    this._calendarSubscription.unsubscribe();\n    this._configurationSubscription.unsubscribe();\n    this._zoneSubscription.unsubscribe();\n  }\n\n  private _apply(): void {\n\n    for (let index = 0; index < this._configuration.initials.length; index++) {\n      \n      const link = this._configuration.initials[index];\n      if (this.group === link.group) {\n\n        this._formats = this._configuration.formats.filter(e => e.format === this._configuration.initials.filter(value => value.group === this.group)[0].format)[0];;\n        this._updateInputDateFormats();\n      }\n    }\n  }\n\n  private _updateInputDateFormats(): void {\n\n    this._zoneSubscription = this._zone.onStable\n      .pipe(take(1))\n      .subscribe(() => {\n        \n        //  Handle input date formats\n        (this.datePicker.datepickerInput as any)._dateFormats = this._formats.momentDateFormats;\n\n        //  Refresh the input value to use the new format\n        const currentValue = this.formControl.form.value;\n        this.formControl.form.patchValue(currentValue);\n      });\n  }\n}\n","<ng-content></ng-content>","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_FORMATS, MomentDateAdapter } from '@angular/material-moment-adapter';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\n\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { NgxGaewynnDatePickerComponent } from './ngx-gaewynn-datepicker.component';\n\n@NgModule({\n  declarations: [\n    NgxGaewynnDatePickerComponent\n  ],\n  imports: [\n    ReactiveFormsModule,\n\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatInputModule\n  ],\n  exports: [\n    NgxGaewynnDatePickerComponent\n  ],\n  providers: [\n    MomentDateAdapter,\n\n    { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS] },\n    { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n  ]\n})\nexport class NgxGaewynnDatePickerModule { }\n","import { Component, Inject, ContentChild, Input, NgZone, OnDestroy, EnvironmentInjector, AfterViewInit, ContentChildren, QueryList } from '@angular/core';\nimport { FormControlDirective } from '@angular/forms';\n\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatDateRangePicker } from '@angular/material/datepicker';\nimport { Subscription, take } from 'rxjs';\n\nimport { INgxGaewynnDatePickerConfiguration, NgxGaewynnDatePickerService, INgxGaewynnDatePickerFormats } from '../ngx-gaewynn-datepicker.service';\n\n@Component({\n  selector: 'ngx-gaewynn-date-range-picker',\n  templateUrl: './ngx-gaewynn-date-range-picker.component.html'\n})\nexport class NgxGaewynnDateRangePickerComponent implements AfterViewInit, OnDestroy {\n  \n  @ContentChild(MatDateRangePicker) \n  public dateRangePicker!: MatDateRangePicker<Date>;\n\n  @ContentChildren(FormControlDirective, { descendants: true })\n  public formControls!: QueryList<FormControlDirective>;\n\n  @Input()\n  public group!: string;\n\n  private _calendarSubscription!: Subscription;\n  private _configurationSubscription!: Subscription;\n  private _zoneSubscription!: Subscription;\n  private _configuration!: INgxGaewynnDatePickerConfiguration;\n  private _formats!: INgxGaewynnDatePickerFormats;\n\n  constructor(\n    private readonly _envInjector: EnvironmentInjector,\n    private readonly _zone: NgZone,\n    @Inject(MAT_DATE_LOCALE) private _locale: string,\n    private readonly _dateAdapter: DateAdapter<any>,\n    private readonly _ngxGaewynnDatePickerService: NgxGaewynnDatePickerService) { \n\n    this._configurationSubscription = this._ngxGaewynnDatePickerService.configuration$.subscribe((configuration: INgxGaewynnDatePickerConfiguration) => {\n\n      this._configuration = configuration;\n\n      //  During initialization, the MatDateRangePicker does not exist yet\n      if (!this.dateRangePicker)\n        return;\n      \n      this._apply();\n    })\n  }\n  \n  public ngAfterViewInit(): void {\n    \n    this._apply();\n\n    //  Handle calendar formats when it opened (allows to preserve independance between date pickers)\n    this._calendarSubscription = this.dateRangePicker.openedStream.subscribe(() => {\n\n      this._locale = this._formats.locale;\n      this._dateAdapter.setLocale(this._formats.locale);\n\n      var records = (this._envInjector as any).records as Map<any, any>;\n      records.get(MAT_DATE_FORMATS).value.display.dateInput = this._formats.momentDateFormats.display.dateInput;\n      records.get(MAT_DATE_FORMATS).value.display.dateA11yLabel = this._formats.momentDateFormats.display.dateA11yLabel;\n      records.get(MAT_DATE_FORMATS).value.display.monthYearLabel = this._formats.momentDateFormats.display.monthYearLabel;\n      records.get(MAT_DATE_FORMATS).value.display.monthYearA11yLabel = this._formats.momentDateFormats.display.monthYearA11yLabel;\n      records.get(MAT_DATE_FORMATS).value.parse.dateInput = this._formats.momentDateFormats.parse.dateInput;\n    });\n  }\n\n  public ngOnDestroy(): void {\n\n    this._calendarSubscription.unsubscribe();\n    this._configurationSubscription.unsubscribe();\n    this._zoneSubscription.unsubscribe();\n  }\n\n  private _apply(): void {\n\n    for (let index = 0; index < this._configuration.initials.length; index++) {\n      \n      const link = this._configuration.initials[index];\n      if (this.group === link.group) {\n\n        this._formats = this._configuration.formats.filter(e => e.format === this._configuration.initials.filter(value => value.group === this.group)[0].format)[0];;\n        this._updateInputDateFormats();\n      }\n    }\n  }\n\n  private _updateInputDateFormats(): void {\n\n    this._zoneSubscription = this._zone.onStable\n      .pipe(take(1))\n      .subscribe(() => {\n        \n        //  Handle inputs date formats\n        ((this.dateRangePicker.datepickerInput as any)._startInput as any)._dateFormats = this._formats.momentDateFormats;\n        ((this.dateRangePicker.datepickerInput as any)._endInput as any)._dateFormats = this._formats.momentDateFormats;\n\n        //  Refresh the input value to use the new format\n        const currentValueFrom = this.formControls.first.value;\n        this.formControls.first.form.patchValue(currentValueFrom);\n\n        const currentValueTo = this.formControls.last.value;\n        this.formControls.last.form.patchValue(currentValueTo);\n      });\n  }\n}\n","<ng-content></ng-content>","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_FORMATS, MomentDateAdapter } from '@angular/material-moment-adapter';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\n\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { NgxGaewynnDateRangePickerComponent } from './ngx-gaewynn-date-range-picker.component';\n\n@NgModule({\n  declarations: [\n    NgxGaewynnDateRangePickerComponent\n  ],\n  imports: [\n    ReactiveFormsModule,\n\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatInputModule\n  ],\n  exports: [\n    NgxGaewynnDateRangePickerComponent\n  ],\n  providers: [\n    MomentDateAdapter,\n\n    { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS] },\n    { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n  ]\n})\nexport class NgxGaewynnDateRangePickerModule { }\n","/*\n * Public API Surface of ngx-gaewynn-datepicker\n */\n\nexport * from './lib/date-picker/ngx-gaewynn-datepicker.component';\nexport * from './lib/ngx-gaewynn-datepicker.service';\nexport * from './lib/date-picker/ngx-gaewynn-datepicker.module';\n\nexport * from './lib/date-range-picker/ngx-gaewynn-date-range-picker.component';\nexport * from './lib/date-range-picker/ngx-gaewynn-date-range-picker.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2.NgxGaewynnDatePickerService"],"mappings":"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"}