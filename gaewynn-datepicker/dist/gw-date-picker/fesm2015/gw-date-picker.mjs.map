{"version":3,"file":"gw-date-picker.mjs","sources":["../../../projects/gw-date-picker/src/lib/gw-date-picker.service.ts","../../../projects/gw-date-picker/src/lib/date-picker/gw-date-picker.component.ts","../../../projects/gw-date-picker/src/lib/date-picker/gw-date-picker.component.html","../../../projects/gw-date-picker/src/lib/date-picker/gw-date-picker.module.ts","../../../projects/gw-date-picker/src/lib/date-range-picker/gw-date-range-picker.component.ts","../../../projects/gw-date-picker/src/lib/date-range-picker/gw-date-range-picker.component.html","../../../projects/gw-date-picker/src/lib/date-range-picker/gw-date-range-picker.module.ts","../../../projects/gw-date-picker/src/public-api.ts","../../../projects/gw-date-picker/src/gw-date-picker.ts"],"sourcesContent":["import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { Subject } from 'rxjs/internal/Subject';\n\nexport const GW_DATE_PICKER_CONFIGURATION = new InjectionToken<GWDatePickerConfiguration>(\n  'GW_DATE_PICKER_CONFIGURATION',\n  undefined\n);\n\nexport interface IGWDatePickerFormats {\n  locale: string;\n  momentDateFormats: { \n      parse: { dateInput: string }, \n      display: { \n          dateInput: string;\n          monthYearLabel: string;\n          dateA11yLabel: string;\n          monthYearA11yLabel: string;\n      }\n  };\n}\n\nexport class GWDatePickerConfiguration {\n\n  constructor(\n    public initials: { group: string, locale: string }[],\n    public formats: IGWDatePickerFormats[]) { }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GWDatePickerService {\n\n  public configuration$: Subject<GWDatePickerConfiguration> = new Subject<GWDatePickerConfiguration>();\n\n  private _datePickerConfiguration!: GWDatePickerConfiguration;\n\n  constructor(@Inject(GW_DATE_PICKER_CONFIGURATION) private _configuration: GWDatePickerConfiguration) {\n    this._datePickerConfiguration = JSON.parse(JSON.stringify(_configuration));\n  }\n\n  public init(): void {\n    this.configuration$.next(this._datePickerConfiguration);\n  }\n\n  public updateFormats(group: string, locale: string): void {\n\n    for (let index = 0; index < this._datePickerConfiguration.initials.length; index++) {\n      \n      const element = this._datePickerConfiguration.initials[index];\n      if (element.group === group)\n        element.locale = locale;\n    }\n\n    this.init();\n  }\n}\n","import { Component, Inject, ContentChild, Input, NgZone, OnDestroy, EnvironmentInjector, AfterViewInit } from '@angular/core';\nimport { FormControlDirective } from '@angular/forms';\n\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatDatepicker } from '@angular/material/datepicker';\nimport { Subscription, take } from 'rxjs';\n\nimport { GWDatePickerConfiguration, IGWDatePickerFormats } from '../gw-date-picker.service';\nimport { GWDatePickerService } from '../gw-date-picker.service';\n\n@Component({\n  selector: 'gaewynn-datepicker',\n  templateUrl: './gw-date-picker.component.html'\n})\nexport class GWDatePickerComponent implements AfterViewInit, OnDestroy {\n  \n  @ContentChild(MatDatepicker) \n  public datePicker!: MatDatepicker<Date>;\n\n  @ContentChild(FormControlDirective)\n  public formControl!: FormControlDirective;\n\n  @Input()\n  public group!: string;\n\n  private _calendarSubscription!: Subscription;\n  private _configurationSubscription!: Subscription;\n  private _zoneSubscription!: Subscription;\n  private _configuration!: GWDatePickerConfiguration;\n  private _formats!: IGWDatePickerFormats;\n\n  constructor(\n    private readonly _envInjector: EnvironmentInjector,\n    private readonly _zone: NgZone,\n    @Inject(MAT_DATE_LOCALE) private _locale: string,\n    private readonly _dateAdapter: DateAdapter<any>,\n    private readonly _gwDatePickerService: GWDatePickerService) { \n\n    this._configurationSubscription = this._gwDatePickerService.configuration$.subscribe((configuration: GWDatePickerConfiguration) => {\n\n      this._configuration = configuration;\n\n      //  During initialization, the MatDatePicker does not exist yet\n      if (!this.datePicker)\n        return;\n      \n      this._apply();\n    })\n  }\n  \n  public ngAfterViewInit(): void {\n    \n    this._apply();\n\n    //  Handle calendar formats when it opened (allows to preserve independance between date pickers)\n    this._calendarSubscription = this.datePicker.openedStream.subscribe(() => {\n\n      this._locale = this._formats.locale;\n      this._dateAdapter.setLocale(this._formats.locale);\n\n      var records = (this._envInjector as any).records as Map<any, any>;\n      records.get(MAT_DATE_FORMATS).value.display.dateInput = this._formats.momentDateFormats.display.dateInput;\n      records.get(MAT_DATE_FORMATS).value.display.dateA11yLabel = this._formats.momentDateFormats.display.dateA11yLabel;\n      records.get(MAT_DATE_FORMATS).value.display.monthYearLabel = this._formats.momentDateFormats.display.monthYearLabel;\n      records.get(MAT_DATE_FORMATS).value.display.monthYearA11yLabel = this._formats.momentDateFormats.display.monthYearA11yLabel;\n      records.get(MAT_DATE_FORMATS).value.parse.dateInput = this._formats.momentDateFormats.parse.dateInput;\n    });\n  }\n\n  public ngOnDestroy(): void {\n\n    this._calendarSubscription.unsubscribe();\n    this._configurationSubscription.unsubscribe();\n    this._zoneSubscription.unsubscribe();\n  }\n\n  private _apply(): void {\n\n    for (let index = 0; index < this._configuration.initials.length; index++) {\n      \n      const link = this._configuration.initials[index];\n      if (this.group === link.group) {\n\n        this._formats = this._configuration.formats.filter(e => e.locale === this._configuration.initials.filter(value => value.group === this.group)[0].locale)[0];;\n        this._updateInputDateFormats();\n      }\n    }\n  }\n\n  private _updateInputDateFormats(): void {\n\n    this._zoneSubscription = this._zone.onStable\n      .pipe(take(1))\n      .subscribe(() => {\n        \n        //  Handle input date formats\n        (this.datePicker.datepickerInput as any)._dateFormats = this._formats.momentDateFormats;\n\n        //  Refresh the input value to use the new format\n        const currentValue = this.formControl.form.value;\n        this.formControl.form.patchValue(currentValue);\n      });\n  }\n}\n","<ng-content></ng-content>","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_FORMATS, MomentDateAdapter } from '@angular/material-moment-adapter';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\n\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { GWDatePickerComponent } from './gw-date-picker.component';\n\n@NgModule({\n  declarations: [\n    GWDatePickerComponent\n  ],\n  imports: [\n    ReactiveFormsModule,\n\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatInputModule\n  ],\n  exports: [\n    GWDatePickerComponent\n  ],\n  providers: [\n    MomentDateAdapter,\n\n    { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS] },\n    { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n  ]\n})\nexport class GWDatePickerModule { }\n","import { Component, Inject, ContentChild, Input, NgZone, OnDestroy, EnvironmentInjector, AfterViewInit, ContentChildren, QueryList } from '@angular/core';\nimport { FormControlDirective } from '@angular/forms';\n\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatDateRangePicker } from '@angular/material/datepicker';\nimport { Subscription, take } from 'rxjs';\n\nimport { GWDatePickerConfiguration, GWDatePickerService, IGWDatePickerFormats } from '../gw-date-picker.service';\n\n@Component({\n  selector: 'gaewynn-date-range-picker',\n  templateUrl: './gw-date-range-picker.component.html'\n})\nexport class GWDateRangePickerComponent implements AfterViewInit, OnDestroy {\n  \n  @ContentChild(MatDateRangePicker) \n  public dateRangePicker!: MatDateRangePicker<Date>;\n\n  @ContentChildren(FormControlDirective, { descendants: true })\n  public formControls!: QueryList<FormControlDirective>;\n\n  @Input()\n  public group!: string;\n\n  private _calendarSubscription!: Subscription;\n  private _configurationSubscription!: Subscription;\n  private _zoneSubscription!: Subscription;\n  private _configuration!: GWDatePickerConfiguration;\n  private _formats!: IGWDatePickerFormats;\n\n  constructor(\n    private readonly _envInjector: EnvironmentInjector,\n    private readonly _zone: NgZone,\n    @Inject(MAT_DATE_LOCALE) private _locale: string,\n    private readonly _dateAdapter: DateAdapter<any>,\n    private readonly _gwDatePickerService: GWDatePickerService) { \n\n    this._configurationSubscription = this._gwDatePickerService.configuration$.subscribe((configuration: GWDatePickerConfiguration) => {\n\n      this._configuration = configuration;\n\n      //  During initialization, the MatDateRangePicker does not exist yet\n      if (!this.dateRangePicker)\n        return;\n      \n      this._apply();\n    })\n  }\n  \n  public ngAfterViewInit(): void {\n    \n    this._apply();\n\n    //  Handle calendar formats when it opened (allows to preserve independance between date pickers)\n    this._calendarSubscription = this.dateRangePicker.openedStream.subscribe(() => {\n\n      this._locale = this._formats.locale;\n      this._dateAdapter.setLocale(this._formats.locale);\n\n      var records = (this._envInjector as any).records as Map<any, any>;\n      records.get(MAT_DATE_FORMATS).value.display.dateInput = this._formats.momentDateFormats.display.dateInput;\n      records.get(MAT_DATE_FORMATS).value.display.dateA11yLabel = this._formats.momentDateFormats.display.dateA11yLabel;\n      records.get(MAT_DATE_FORMATS).value.display.monthYearLabel = this._formats.momentDateFormats.display.monthYearLabel;\n      records.get(MAT_DATE_FORMATS).value.display.monthYearA11yLabel = this._formats.momentDateFormats.display.monthYearA11yLabel;\n      records.get(MAT_DATE_FORMATS).value.parse.dateInput = this._formats.momentDateFormats.parse.dateInput;\n    });\n  }\n\n  public ngOnDestroy(): void {\n\n    this._calendarSubscription.unsubscribe();\n    this._configurationSubscription.unsubscribe();\n    this._zoneSubscription.unsubscribe();\n  }\n\n  private _apply(): void {\n\n    for (let index = 0; index < this._configuration.initials.length; index++) {\n      \n      const link = this._configuration.initials[index];\n      if (this.group === link.group) {\n\n        this._formats = this._configuration.formats.filter(e => e.locale === this._configuration.initials.filter(value => value.group === this.group)[0].locale)[0];;\n        this._updateInputDateFormats();\n      }\n    }\n  }\n\n  private _updateInputDateFormats(): void {\n\n    this._zoneSubscription = this._zone.onStable\n      .pipe(take(1))\n      .subscribe(() => {\n        \n        //  Handle inputs date formats\n        ((this.dateRangePicker.datepickerInput as any)._startInput as any)._dateFormats = this._formats.momentDateFormats;\n        ((this.dateRangePicker.datepickerInput as any)._endInput as any)._dateFormats = this._formats.momentDateFormats;\n\n        //  Refresh the input value to use the new format\n        const currentValueFrom = this.formControls.first.value;\n        this.formControls.first.form.patchValue(currentValueFrom);\n\n        const currentValueTo = this.formControls.last.value;\n        this.formControls.last.form.patchValue(currentValueTo);\n      });\n  }\n}\n","<ng-content></ng-content>","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_FORMATS, MomentDateAdapter } from '@angular/material-moment-adapter';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\n\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { GWDateRangePickerComponent } from './gw-date-range-picker.component';\n\n@NgModule({\n  declarations: [\n    GWDateRangePickerComponent\n  ],\n  imports: [\n    ReactiveFormsModule,\n\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatInputModule\n  ],\n  exports: [\n    GWDateRangePickerComponent\n  ],\n  providers: [\n    MomentDateAdapter,\n\n    { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS] },\n    { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n  ]\n})\nexport class GWDateRangePickerModule { }\n","/*\n * Public API Surface of gaewynn-date-picker\n */\n\nexport * from './lib/date-picker/gw-date-picker.component';\nexport * from './lib/gw-date-picker.service';\nexport * from './lib/date-picker/gw-date-picker.module';\n\nexport * from './lib/date-range-picker/gw-date-range-picker.component';\nexport * from './lib/date-range-picker/gw-date-range-picker.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2.GWDatePickerService"],"mappings":"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"}